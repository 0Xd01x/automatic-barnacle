--wait (10) --time to run
game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Rebirth"):FireServer()   --Rebirth
-- Combined Auto Pickup (Configurable), Boss Hunt and Combat Script with Auto Rebirth Before Kick
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

print("üî• Starting Combined Script - Following Exact Sequence")

-- ============== INSTANT KICK TIMER SETUP ==============
print("üö® INSTANT KICK TIMER ACTIVATED")
print("‚è∞ Player will be kicked within 18 seconds...")

-- Start countdown timer
local kickTimer = 18
local autoRebirthTimer = 10 -- Auto rebirth 20 seconds before kick (700-20=680)
local kickConnection
local rebirthExecuted = true

-- Function to execute rebirth
local function executeRebirth()
    local success, result = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Rebirth"):FireServer()
    end)
    
    if success then
        print("‚úÖ Rebirth executed successfully!")
        return true
    else
        warn("‚ùå Failed to execute rebirth:", result)
        return false
    end
end

-- Function to rejoin game
local function rejoinGame()
    -- Kicks you
    LocalPlayer:Kick("Rejoining...")
    -- Waits a moment then rejoins
    task.wait(1)
    TeleportService:Teleport(game.PlaceId, LocalPlayer)
end

kickConnection = RunService.Heartbeat:Connect(function()
    kickTimer = kickTimer - RunService.Heartbeat:Wait()
    
    -- Show countdown every second
    if math.floor(kickTimer) ~= math.floor(kickTimer + RunService.Heartbeat:Wait()) then
        print("‚è≥ Kicking in: " .. math.ceil(kickTimer) .. " seconds")
    end
    
    -- Auto rebirth check (20 seconds before kick)
    if kickTimer <= autoRebirthTimer and not rebirthExecuted then
        rebirthExecuted = true
        print("üîÑ AUTO REBIRTH TRIGGERED! (20 seconds before kick)")
        local rebirthSuccess = executeRebirth()
        
        if rebirthSuccess then
            print("‚úÖ Auto rebirth completed successfully!")
            print("‚è≥ Waiting for kick timer to complete...")
        else
            print("‚ùå Auto rebirth failed! Will try again at kick time...")
            rebirthExecuted = false -- Allow retry at kick time
        end
    end
    
    -- Kick player when timer reaches 0
    if kickTimer <= 0 then
        kickConnection:Disconnect()
        print("üëã KICKING PLAYER NOW!")
        
        -- Try rebirth one more time if it wasn't successful earlier
        if not rebirthExecuted then
            print("üîÑ Attempting final rebirth before kick...")
            executeRebirth()
            task.wait(2)
        end
        
        rejoinGame()
        return -- Exit script completely
    end
end)

-- ============== CONFIG PACKUP SYSTEM ==============
print("‚öôÔ∏è Loading Config Packup System...")

local ConfigPackup = {
    ["Essence"] = true, ---EXP
    ["Raw Meat"] = fast, -- Changed from 'fast' to true
    ["Spirit Key"] = fast, -- Changed from 'fast' to true
    ["Raw Gold"] = true,   ---Gold
    ["Big Raw Gold"] = true,  ---Gold
    ["Raw Magnetite"] = fast, -- Changed from 'fast' to true
    ["Big Raw Magnetite"] = fast -- Changed from 'fast' to true
}
-- ============== CONFIG DELA SYSTEM ==============

local ConfigTeleport = {
    ["DelayAfterTP"] = 1,        -- Delay after teleporting to boss
    ["DelayBeforePinkGiant"] = 4, -- Delay before Pink Giant
    ["DelayAfterEquip"] = 0.01,   -- Delay after equipping tool
    ["DelayAfterDropCollection"] = 0.001, -- Delay after collecting drops
    ["KickPlayer"] = 18,         -- ‚è∞ Player kick timer (seconds)
    ["AutoRebirthDelay"] = 20    -- üîÑ Auto rebirth delay before kick (seconds)
}

print("üìã Config Packup Settings:")
for itemType, enabled in pairs(ConfigPackup) do
    print("   " .. (enabled and "‚úÖ" or "‚ùå") .. " " .. itemType .. ": " .. (enabled and "Enabled" or "Disabled"))
end

print("üîÑ Auto Rebirth will trigger " .. ConfigTeleport["AutoRebirthDelay"] .. " seconds before kick")

-- ============== PRE-STEP: INITIAL FAST PICKUP ==============
print("üöÄ PRE-STEP: Running Initial Fast Pickup...")

-- Wait for Events and Pickup to be ready
local Events = ReplicatedStorage:WaitForChild("Events")
local PickupRemote = Events:WaitForChild("Pickup")

-- Function to check if item should be picked up based on config
local function shouldPickupItem(itemName)
    local lowerItemName = string.lower(itemName)
    
    for configItemType, enabled in pairs(ConfigPackup) do
        if enabled then
            local lowerConfigType = string.lower(configItemType)
            if string.find(lowerItemName, lowerConfigType) then
                return true, configItemType
            end
        end
    end
    
    return false, nil
end

-- Fast pickup function with reduced delays
local function fastPickupAllItems()
    local itemsFolder = workspace:FindFirstChild("Important")
    if not itemsFolder then return end
    
    local items = itemsFolder:FindFirstChild("Items")
    if not items then return end
    
    local pickupCount = 0
    print("üî• Starting FAST pickup scan...")
    
    for _, item in pairs(items:GetChildren()) do
        if item:IsA("BasePart") or item:IsA("Model") then
            local shouldPickup, itemType = shouldPickupItem(item.Name)
            
            if shouldPickup then
                spawn(function()
                    local success, result = pcall(function()
                        local args = {item}
                        return PickupRemote:InvokeServer(unpack(args))
                    end)
                    
                    if success then
                        pickupCount = pickupCount + 1
                        print("‚ö° Fast pickup " .. itemType .. ":", item.Name)
                    end
                end)
                wait(0.01) -- Very fast delay
            end
        end
    end
    
    print("üéØ Fast pickup scan completed! Items processed:", pickupCount)
end

-- Run initial fast pickup 3 times
for i = 1, 3 do
    -- Check if kick timer expired
    if kickTimer <= 0 then break end
    
    print("üîÑ Fast pickup round", i .. "/3")
    fastPickupAllItems()
    wait(0.5) -- Short wait between rounds
end

print("‚úÖ PRE-STEP COMPLETED: Initial fast pickup finished!")
wait(1)

-- Check if still alive after wait
if kickTimer <= 0 then return end

-- ============== STEP 1: CONTINUOUS AUTO PICKUP ==============
print("üíé STEP 1: Starting Continuous Auto Pickup System...")

-- Regular pickup function for continuous operation
local function pickupConfiguredItems()
    local itemsFolder = workspace:FindFirstChild("Important")
    if not itemsFolder then return end
    
    local items = itemsFolder:FindFirstChild("Items")
    if not items then return end
    
    for _, item in pairs(items:GetChildren()) do
        if item:IsA("BasePart") or item:IsA("Model") then
            local shouldPickup, itemType = shouldPickupItem(item.Name)
            
            if shouldPickup then
                spawn(function()
                    local success, result = pcall(function()
                        local args = {item}
                        return PickupRemote:InvokeServer(unpack(args))
                    end)
                    
                    if success then
                        print("üîÑ Continuous pickup " .. itemType .. ":", item.Name)
                    end
                end)
                wait(0.05) -- Faster continuous pickup
            end
        end
    end
end

-- Setup faster continuous Auto Pickup loop
local autoPickupEnabled = true
spawn(function()
    while autoPickupEnabled and kickTimer > 0 do
        pickupConfiguredItems()
        wait(1) -- Faster continuous scan (was 2 seconds, now 1 second)
    end
end)

print("‚úÖ STEP 1 COMPLETED: Continuous Auto Pickup System is running!")

-- ============== STEP 2: EXECUTING KEY SEQUENCE ==============
print("üîë STEP 2: Executing Key Sequence...")

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
    wait(0.05)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
end

-- Key sequence order
local keySequence = {
    {key = Enum.KeyCode.BackSlash, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Up, delay = 0.001},
    {key = Enum.KeyCode.Up, delay = 0.001},
    {key = Enum.KeyCode.Return, delay = 0.001},
    {key = Enum.KeyCode.Left, delay = 0.001},
    {key = Enum.KeyCode.Return, delay = 0.001}
}

for i, keyData in ipairs(keySequence) do
    -- Check if kick timer expired
    if kickTimer <= 0 then break end
    
    pressKey(keyData.key)
    wait(keyData.delay)
    print("üîπ Pressed key:", keyData.key.Name)
end

print("‚úÖ STEP 2 COMPLETED: Key sequence executed!")
wait(2)

-- Check if still alive after wait
if kickTimer <= 0 then return end

-- ============== STEP 3: EQUIP TOOL AND ATTACK SETUP ==============
print("‚öîÔ∏è STEP 3: Equip Tool and Attack Setup...")

local function TP(Pos)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = Pos
        print("üìç Successfully teleported to:", Pos)
    else
        warn("‚ùå Cannot teleport - Character or HumanoidRootPart not found")
    end
end

-- Function to equip tool
local function equipTool()
    local success, result = pcall(function()
        local args = {1}
        ReplicatedStorage:WaitForChild("Events"):WaitForChild("EquipTool"):FireServer(unpack(args))
    end)
    
    if success then
        print("‚öîÔ∏è Tool equipped successfully")
        return true
    else
        warn("‚ùå Failed to equip tool:", result)
        return false
    end
end

-- Function to attack target
local function attackTarget(target)
    if not target or not target:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local player = Players.LocalPlayer
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local success, result = pcall(function()
        local args = {
            {
                ["[870.1816,-673.9194,831.3134,-1,0,0,0,0.9997,0.0232,0,0.0232,-0.9997]"] = target,
                ["[874.08,-678.907,828.7968,-0.9853,-0.1368,-0.102,-0.1576,0.9589,0.2359,0.0656,0.2485,-0.9664]"] = player.Character
            },
            tick(),
            CFrame.new(873.4103393554688, -676.826171875, 828.6465454101562, -0.9989079833030701, 1.0750500223366544e-07, -0.04672091081738472, 1.0622703427998204e-07, 1, 2.983614777463117e-08, 0.04672091081738472, 2.4840542067749993e-08, -0.9989079833030701)
        }
        ReplicatedStorage:WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
    end)
    
    return success
end

-- Equip tool first
local toolEquipped = equipTool()
wait(ConfigTeleport["DelayAfterEquip"])

print("‚úÖ STEP 3 COMPLETED: Tool equipped and attack system ready!")

-- ============== STEP 4: TP QUEEN ANT AND CHECK SUCCESS ==============
print("üëë STEP 4: TP Queen Ant and Kill...")

local queenAntCompleted = false
local critters = workspace.Important.Critters

if critters and kickTimer > 0 then
    local queenAnt = critters:FindFirstChild("Queen Ant")
    if queenAnt and queenAnt:FindFirstChild("HumanoidRootPart") then
        print("üëë Queen Ant found! Teleporting...")
        
        -- Teleport to Queen Ant
        TP(queenAnt.HumanoidRootPart.CFrame)
        wait(1)
        
        -- Re-equip tool if needed
        if not toolEquipped then
            equipTool()
            wait(0.5)
        end
        
        print("‚öîÔ∏è Starting Queen Ant kill sequence...")
        local attackCount = 0
        while queenAnt.Parent and queenAnt:FindFirstChild("HumanoidRootPart") and attackCount < 500 and kickTimer > 0 do
            if attackTarget(queenAnt) then
                attackCount = attackCount + 1
                if attackCount % 20 == 0 then
                    print("üí• Queen Ant attacks:", attackCount)
                end
            end
            wait(0.1)
        end
        
        -- Check if Queen Ant is killed
        if not queenAnt.Parent or not queenAnt:FindFirstChild("HumanoidRootPart") then
            queenAntCompleted = true
            print("üèÜ STEP 4 SUCCESS: Queen Ant killed!")
        else
            print("‚ö†Ô∏è STEP 4 FAILED: Queen Ant still alive")
        end
    else
        print("‚ùå STEP 4 FAILED: Queen Ant not found")
    end
else
    print("‚ùå STEP 4 FAILED: Critters folder not found or kick timer expired")
end

-- Only proceed to step 5 if step 4 is completed and timer hasn't expired
if queenAntCompleted and kickTimer > 0 then
    print("‚úÖ Queen Ant quest completed! Proceeding to Pink Giant...")
    
    -- ============== STEP 5: TP PINK GIANT AND CHECK SUCCESS ==============
    print("üå∏ STEP 5: TP Pink Giant and Kill...")
    
    -- Add 3 second delay before Pink Giant
    print("‚è≥ Waiting 3 seconds before Pink Giant...")
    wait(3.5)
    
    local pinkGiantCompleted = false
    
    if critters and kickTimer > 0 then
        local pinkGiant = critters:FindFirstChild("Pink Giant")
        if pinkGiant and pinkGiant:FindFirstChild("HumanoidRootPart") then
            print("üå∏ Pink Giant found! Teleporting...")
            
            -- Teleport to Pink Giant
            TP(pinkGiant.HumanoidRootPart.CFrame)
            wait(1)
            
            -- Equip tool 2 times as requested
            print("‚öîÔ∏è Equipping tool (1st time)...")
            equipTool()
            wait(0.5)
            print("‚öîÔ∏è Equipping tool (2nd time)...")
            equipTool()
            wait(0.5)
            
            print("‚öîÔ∏è Starting Pink Giant kill sequence...")
            local attackCount = 0
            while pinkGiant.Parent and pinkGiant:FindFirstChild("HumanoidRootPart") and attackCount < 500 and kickTimer > 0 do
                if attackTarget(pinkGiant) then
                    attackCount = attackCount + 1
                    if attackCount % 20 == 0 then
                        print("üí• Pink Giant attacks:", attackCount)
                    end
                end
                wait(0.1)
            end
            
            -- Check if Pink Giant is killed
            if not pinkGiant.Parent or not pinkGiant:FindFirstChild("HumanoidRootPart") then
                print("üèÜ Pink Giant killed! Now collecting drops...")
                
                -- Function to collect Pink Giant drops
                local function collectPinkGiantDrops()
                    local itemsFolder = workspace:FindFirstChild("Important")
                    if not itemsFolder then return 0 end
                    
                    local items = itemsFolder:FindFirstChild("Items")
                    if not items then return 0 end
                    
                    local dropCount = 0
                    for _, item in pairs(items:GetChildren()) do
                        if item:IsA("BasePart") or item:IsA("Model") then
                            local shouldPickup, itemType = shouldPickupItem(item.Name)
                            
                            if shouldPickup then
                                spawn(function()
                                    local success, result = pcall(function()
                                        local args = {item}
                                        return PickupRemote:InvokeServer(unpack(args))
                                    end)
                                    
                                    if success then
                                        dropCount = dropCount + 1
                                        print("üíé Collected Pink Giant drop " .. itemType .. ":", item.Name)
                                    end
                                end)
                                wait(0.05)
                            end
                        end
                    end
                    return dropCount
                end
                
                -- Collect drops multiple times to ensure we get everything
                print("üîÑ Starting Pink Giant drop collection phase...")
                local totalDrops = 0
                for i = 1, 5 do
                    if kickTimer <= 0 then break end
                    print("üì¶ Collection round " .. i .. "/5")
                    local roundDrops = collectPinkGiantDrops()
                    totalDrops = totalDrops + roundDrops
                    wait(1) -- Wait between collection rounds
                end
                
                print("‚úÖ Pink Giant drop collection completed! Total items collected:", totalDrops)
                print("‚è≥ Waiting " .. ConfigTeleport["DelayAfterDropCollection"] .. " seconds to ensure all drops are collected...")
                wait(ConfigTeleport["DelayAfterDropCollection"])
                
                pinkGiantCompleted = true
                print("üèÜ STEP 5 SUCCESS: Pink Giant killed and drops collected!")
            else
                print("‚ö†Ô∏è STEP 5 FAILED: Pink Giant still alive")
            end
        else
            print("‚ùå STEP 5 FAILED: Pink Giant not found")
        end
    else
        print("‚ùå STEP 5 FAILED: Critters folder not found or kick timer expired")
    end
    
    -- ============== STEP 6: CHECK BOTH QUESTS AND EARLY REJOIN ==============
    if queenAntCompleted and pinkGiantCompleted and kickTimer > 0 then
        print("üéâ STEP 6: BOTH QUESTS COMPLETED!")
        print("üìã Final Quest Status:")
        print("   ‚úÖ Step 4 - Queen Ant: COMPLETED")
        print("   ‚úÖ Step 5 - Pink Giant: COMPLETED")
        print("   ‚úÖ Both quests: SUCCESS")
        
        print("üèÜ All quests completed! Executing final rebirth and rejoining game!")
        executeRebirth()
        wait(2)
        kickConnection:Disconnect() -- Stop the timer
        rejoinGame()
    else
        print("‚ùå STEP 6: NOT ALL QUESTS COMPLETED")
        print("üìã Final Quest Status:")
        print("   " .. (queenAntCompleted and "‚úÖ" or "‚ùå") .. " Step 4 - Queen Ant: " .. (queenAntCompleted and "COMPLETED" or "FAILED"))
        print("   " .. (pinkGiantCompleted and "‚úÖ" or "‚ùå") .. " Step 5 - Pink Giant: " .. (pinkGiantCompleted and "COMPLETED" or "FAILED"))
        print("üîÑ Player will be rejoined when timer expires...")
    end
else
    print("‚ùå Queen Ant quest failed or timer expired - Skipping Pink Giant")
    print("üîÑ Player will be rejoined when timer expires...")
end

print("üéØ Script execution completed following exact sequence!")
print("‚è≥ Kick timer will continue running with auto rebirth feature...")
