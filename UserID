-- INNIE HUB - SIMPLE AUTO REJOIN SCRIPT
print("üî• Starting INNIE HUB Auto Script")

-- ============== SIMPLE AUTO-EXECUTION METHOD ==============
-- Check if this is auto execution
if not _G.INNIE_HUB_FIRST_RUN then
    _G.INNIE_HUB_FIRST_RUN = true
    print("üìã First run detected")
else
    print("üöÄ Auto execution detected!")
end

-- Prevent multiple instances
if _G.INNIE_HUB_RUNNING then
    print("‚ö†Ô∏è Script already running, stopping duplicate...")
    return
end
_G.INNIE_HUB_RUNNING = true

print("üîÑ Initializing script...")
wait(2)

-- Main script execution
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

print("üî• Starting Combined Script - Following Exact Sequence")

-- Initial rebirth
game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Rebirth"):FireServer()

-- ============== INSTANT KICK TIMER SETUP ==============
print("üö® INSTANT KICK TIMER ACTIVATED")
print("‚è∞ Player will be kicked within 18 seconds...")

-- Start countdown timer
local kickTimer = 18
local autoRebirthTimer = 10
local kickConnection
local rebirthExecuted = true

-- Function to execute rebirth
local function executeRebirth()
    local success, result = pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Rebirth"):FireServer()
    end)
    
    if success then
        print("‚úÖ Rebirth executed successfully!")
        return true
    else
        warn("‚ùå Failed to execute rebirth:", result)
        return false
    end
end

-- Simple rejoin function
local function rejoinGame()
    print("üîÑ Rejoining server...")
    _G.INNIE_HUB_RUNNING = false
    
    -- Store auto execution flag
    _G.INNIE_HUB_AUTO_REJOIN = true
    
    -- Simple rejoin
    spawn(function()
        wait(1)
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)
    
    LocalPlayer:Kick("üîÑ Auto rejoining server...")
end

-- Setup auto execution on game join
spawn(function()
    -- Wait for game to fully load
    wait(5)
    
    -- Check if this is an auto rejoin
    if _G.INNIE_HUB_AUTO_REJOIN then
        print("üöÄ Auto rejoin detected! Restarting script...")
        _G.INNIE_HUB_AUTO_REJOIN = false
        _G.INNIE_HUB_RUNNING = false
        
        wait(2)
        -- Restart the script
        loadstring(game:HttpGet("https://pastebin.com/raw/YOUR_SCRIPT_URL"))()
        -- Note: You'll need to upload this script to pastebin and replace YOUR_SCRIPT_URL
        -- Or use the local restart method below:
        
        -- Local restart method
        _G.INNIE_HUB_RUNNING = false
        wait(1)
        loadstring([[
            _G.INNIE_HUB_RUNNING = false
            wait(1)
            -- Re-run this entire script
            ]] .. string.dump(function()
                -- Insert the main script code here for local execution
                print("üîÑ Local auto restart...")
            end))()
    end
end)

kickConnection = RunService.Heartbeat:Connect(function()
    kickTimer = kickTimer - RunService.Heartbeat:Wait()
    
    -- Show countdown every second
    if math.floor(kickTimer) ~= math.floor(kickTimer + RunService.Heartbeat:Wait()) then
        print("‚è≥ Kicking in: " .. math.ceil(kickTimer) .. " seconds")
    end
    
    -- Auto rebirth check
    if kickTimer <= autoRebirthTimer and not rebirthExecuted then
        rebirthExecuted = true
        print("üîÑ AUTO REBIRTH TRIGGERED!")
        local rebirthSuccess = executeRebirth()
        
        if rebirthSuccess then
            print("‚úÖ Auto rebirth completed successfully!")
        else
            print("‚ùå Auto rebirth failed! Will try again at kick time...")
            rebirthExecuted = false
        end
    end
    
    -- Kick player when timer reaches 0
    if kickTimer <= 0 then
        kickConnection:Disconnect()
        print("üëã KICKING PLAYER NOW!")
        
        if not rebirthExecuted then
            print("üîÑ Attempting final rebirth before kick...")
            executeRebirth()
            task.wait(2)
        end
        
        rejoinGame()
        return
    end
end)

-- ============== CONFIG SYSTEMS ==============
local ConfigPackup = {
    ["Essence"] = true,
    ["Raw Meat"] = true,
    ["Spirit Key"] = true,
    ["Raw Gold"] = true,
    ["Big Raw Gold"] = true,
    ["Raw Magnetite"] = true,
    ["Big Raw Magnetite"] = true
}

local ConfigTeleport = {
    ["DelayAfterTP"] = 1,
    ["DelayBeforePinkGiant"] = 4,
    ["DelayAfterEquip"] = 0.01,
    ["DelayAfterDropCollection"] = 0.001,
    ["KickPlayer"] = 18,
    ["AutoRebirthDelay"] = 20
}

print("üìã Config loaded successfully")

-- Wait for Events and Pickup
local Events = ReplicatedStorage:WaitForChild("Events")
local PickupRemote = Events:WaitForChild("Pickup")

-- Function to check if item should be picked up
local function shouldPickupItem(itemName)
    local lowerItemName = string.lower(itemName)
    
    for configItemType, enabled in pairs(ConfigPackup) do
        if enabled then
            local lowerConfigType = string.lower(configItemType)
            if string.find(lowerItemName, lowerConfigType) then
                return true, configItemType
            end
        end
    end
    return false, nil
end

-- Fast pickup function
local function fastPickupAllItems()
    local itemsFolder = workspace:FindFirstChild("Important")
    if not itemsFolder then return end
    
    local items = itemsFolder:FindFirstChild("Items")
    if not items then return end
    
    local pickupCount = 0
    
    for _, item in pairs(items:GetChildren()) do
        if item:IsA("BasePart") or item:IsA("Model") then
            local shouldPickup, itemType = shouldPickupItem(item.Name)
            
            if shouldPickup then
                spawn(function()
                    local success = pcall(function()
                        local args = {item}
                        return PickupRemote:InvokeServer(unpack(args))
                    end)
                    
                    if success then
                        pickupCount = pickupCount + 1
                        print("‚ö° Fast pickup " .. itemType .. ":", item.Name)
                    end
                end)
                wait(0.01)
            end
        end
    end
    
    print("üéØ Fast pickup completed! Items processed:", pickupCount)
end

-- ============== PRE-STEP: INITIAL FAST PICKUP ==============
print("üöÄ PRE-STEP: Running Initial Fast Pickup...")

for i = 1, 3 do
    if kickTimer <= 0 then break end
    print("üîÑ Fast pickup round", i .. "/3")
    fastPickupAllItems()
    wait(0.5)
end

print("‚úÖ PRE-STEP COMPLETED!")
wait(1)

if kickTimer <= 0 then return end

-- ============== STEP 1: CONTINUOUS AUTO PICKUP ==============
print("üíé STEP 1: Starting Continuous Auto Pickup...")

local function pickupConfiguredItems()
    local itemsFolder = workspace:FindFirstChild("Important")
    if not itemsFolder then return end
    
    local items = itemsFolder:FindFirstChild("Items")
    if not items then return end
    
    for _, item in pairs(items:GetChildren()) do
        if item:IsA("BasePart") or item:IsA("Model") then
            local shouldPickup, itemType = shouldPickupItem(item.Name)
            
            if shouldPickup then
                spawn(function()
                    local success = pcall(function()
                        local args = {item}
                        return PickupRemote:InvokeServer(unpack(args))
                    end)
                    
                    if success then
                        print("üîÑ Continuous pickup " .. itemType .. ":", item.Name)
                    end
                end)
                wait(0.05)
            end
        end
    end
end

-- Setup continuous Auto Pickup loop
local autoPickupEnabled = true
spawn(function()
    while autoPickupEnabled and kickTimer > 0 do
        pickupConfiguredItems()
        wait(1)
    end
end)

print("‚úÖ STEP 1 COMPLETED!")

-- ============== STEP 2: KEY SEQUENCE ==============
print("üîë STEP 2: Executing Key Sequence...")

local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
    wait(0.05)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
end

local keySequence = {
    {key = Enum.KeyCode.BackSlash, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Down, delay = 0.001},
    {key = Enum.KeyCode.Up, delay = 0.001},
    {key = Enum.KeyCode.Up, delay = 0.001},
    {key = Enum.KeyCode.Return, delay = 0.001},
    {key = Enum.KeyCode.Left, delay = 0.001},
    {key = Enum.KeyCode.Return, delay = 0.001}
}

for i, keyData in ipairs(keySequence) do
    if kickTimer <= 0 then break end
    pressKey(keyData.key)
    wait(keyData.delay)
    print("üîπ Pressed key:", keyData.key.Name)
end

print("‚úÖ STEP 2 COMPLETED!")
wait(2)

if kickTimer <= 0 then return end

-- ============== STEP 3: EQUIP TOOL AND ATTACK SETUP ==============
print("‚öîÔ∏è STEP 3: Equip Tool and Attack Setup...")

local function TP(Pos)
    local character = game.Players.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = Pos
        print("üìç Successfully teleported")
    else
        warn("‚ùå Cannot teleport - Character not found")
    end
end

local function equipTool()
    local success = pcall(function()
        local args = {1}
        ReplicatedStorage:WaitForChild("Events"):WaitForChild("EquipTool"):FireServer(unpack(args))
    end)
    
    if success then
        print("‚öîÔ∏è Tool equipped successfully")
        return true
    else
        warn("‚ùå Failed to equip tool")
        return false
    end
end

local function attackTarget(target)
    if not target or not target:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local player = Players.LocalPlayer
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local success = pcall(function()
        local args = {
            {
                ["[870.1816,-673.9194,831.3134,-1,0,0,0,0.9997,0.0232,0,0.0232,-0.9997]"] = target,
                ["[874.08,-678.907,828.7968,-0.9853,-0.1368,-0.102,-0.1576,0.9589,0.2359,0.0656,0.2485,-0.9664]"] = player.Character
            },
            tick(),
            CFrame.new(873.4103393554688, -676.826171875, 828.6465454101562, -0.9989079833030701, 1.0750500223366544e-07, -0.04672091081738472, 1.0622703427998204e-07, 1, 2.983614777463117e-08, 0.04672091081738472, 2.4840542067749993e-08, -0.9989079833030701)
        }
        ReplicatedStorage:WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
    end)
    
    return success
end

local toolEquipped = equipTool()
wait(ConfigTeleport["DelayAfterEquip"])

print("‚úÖ STEP 3 COMPLETED!")

-- ============== STEP 4: QUEEN ANT ==============
print("üëë STEP 4: TP Queen Ant and Kill...")

local queenAntCompleted = false
local critters = workspace.Important.Critters

if critters and kickTimer > 0 then
    local queenAnt = critters:FindFirstChild("Queen Ant")
    if queenAnt and queenAnt:FindFirstChild("HumanoidRootPart") then
        print("üëë Queen Ant found! Teleporting...")
        
        TP(queenAnt.HumanoidRootPart.CFrame)
        wait(1)
        
        if not toolEquipped then
            equipTool()
            wait(0.5)
        end
        
        print("‚öîÔ∏è Starting Queen Ant kill sequence...")
        local attackCount = 0
        while queenAnt.Parent and queenAnt:FindFirstChild("HumanoidRootPart") and attackCount < 500 and kickTimer > 0 do
            if attackTarget(queenAnt) then
                attackCount = attackCount + 1
                if attackCount % 20 == 0 then
                    print("üí• Queen Ant attacks:", attackCount)
                end
            end
            wait(0.1)
        end
        
        if not queenAnt.Parent or not queenAnt:FindFirstChild("HumanoidRootPart") then
            queenAntCompleted = true
            print("üèÜ STEP 4 SUCCESS: Queen Ant killed!")
        else
            print("‚ö†Ô∏è STEP 4 FAILED: Queen Ant still alive")
        end
    else
        print("‚ùå STEP 4 FAILED: Queen Ant not found")
    end
else
    print("‚ùå STEP 4 FAILED: Critters folder not found")
end

-- ============== STEP 5: PINK GIANT ==============
if queenAntCompleted and kickTimer > 0 then
    print("‚úÖ Queen Ant completed! Proceeding to Pink Giant...")
    print("üå∏ STEP 5: TP Pink Giant and Kill...")
    
    print("‚è≥ Waiting " .. ConfigTeleport["DelayBeforePinkGiant"] .. " seconds...")
    wait(ConfigTeleport["DelayBeforePinkGiant"])
    
    local pinkGiantCompleted = false
    
    -- Enhanced Pink Giant search
    local function findPinkGiant()
        if critters then
            local pinkGiant = critters:FindFirstChild("Pink Giant")
            if pinkGiant and pinkGiant:FindFirstChild("HumanoidRootPart") then
                return pinkGiant
            end
        end
        
        -- Search in Important folder
        local importantFolder = workspace:FindFirstChild("Important")
        if importantFolder then
            for _, folder in pairs(importantFolder:GetChildren()) do
                if folder:IsA("Folder") then
                    local pinkGiant = folder:FindFirstChild("Pink Giant")
                    if pinkGiant and pinkGiant:FindFirstChild("HumanoidRootPart") then
                        print("üîç Found Pink Giant in:", folder.Name)
                        return pinkGiant
                    end
                end
            end
        end
        
        return nil
    end
    
    if kickTimer > 0 then
        print("üîç Searching for Pink Giant...")
        local pinkGiant = findPinkGiant()
        
        if pinkGiant and pinkGiant:FindFirstChild("HumanoidRootPart") then
            print("üå∏ Pink Giant found!")
            
            -- Multiple teleport attempts
            for i = 1, 3 do
                print("üöÄ Teleport attempt " .. i .. "/3")
                TP(pinkGiant.HumanoidRootPart.CFrame)
                wait(1)
                
                local player = Players.LocalPlayer
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (player.Character.HumanoidRootPart.Position - pinkGiant.HumanoidRootPart.Position).Magnitude
                    print("üìè Distance:", math.floor(distance))
                    if distance < 50 then
                        print("‚úÖ Successful teleport!")
                        break
                    end
                end
            end
            
            -- Equip tool twice
            print("‚öîÔ∏è Equipping tools...")
            equipTool()
            wait(0.5)
            equipTool()
            wait(0.5)
            
            print("‚öîÔ∏è Starting Pink Giant kill sequence...")
            local attackCount = 0
            
            while pinkGiant.Parent and pinkGiant:FindFirstChild("HumanoidRootPart") and attackCount < 500 and kickTimer > 0 do
                -- Re-position every 50 attacks
                if attackCount > 0 and attackCount % 50 == 0 then
                    print("üîÑ Re-positioning...")
                    TP(pinkGiant.HumanoidRootPart.CFrame)
                    wait(0.2)
                end
                
                if attackTarget(pinkGiant) then
                    attackCount = attackCount + 1
                    if attackCount % 20 == 0 then
                        print("üí• Pink Giant attacks:", attackCount)
                    end
                end
                wait(0.1)
            end
            
            if not pinkGiant.Parent or not pinkGiant:FindFirstChild("HumanoidRootPart") then
                print("üèÜ Pink Giant killed! Collecting drops...")
                
                -- Collect drops
                local function collectDrops()
                    local itemsFolder = workspace:FindFirstChild("Important")
                    if not itemsFolder then return 0 end
                    
                    local items = itemsFolder:FindFirstChild("Items")
                    if not items then return 0 end
                    
                    local dropCount = 0
                    for _, item in pairs(items:GetChildren()) do
                        if item:IsA("BasePart") or item:IsA("Model") then
                            local shouldPickup, itemType = shouldPickupItem(item.Name)
                            
                            if shouldPickup then
                                spawn(function()
                                    local success = pcall(function()
                                        local args = {item}
                                        return PickupRemote:InvokeServer(unpack(args))
                                    end)
                                    
                                    if success then
                                        dropCount = dropCount + 1
                                        print("üíé Collected " .. itemType .. ":", item.Name)
                                    end
                                end)
                                wait(0.05)
                            end
                        end
                    end
                    return dropCount
                end
                
                local totalDrops = 0
                for i = 1, 5 do
                    if kickTimer <= 0 then break end
                    print("üì¶ Collection round " .. i .. "/5")
                    totalDrops = totalDrops + collectDrops()
                    wait(1)
                end
                
                print("‚úÖ Drop collection completed! Total:", totalDrops)
                pinkGiantCompleted = true
                print("üèÜ STEP 5 SUCCESS!")
            else
                print("‚ö†Ô∏è STEP 5 FAILED: Pink Giant still alive")
            end
        else
            print("‚ùå STEP 5 FAILED: Pink Giant not found")
        end
    end
    
    -- ============== FINAL CHECK ==============
    if queenAntCompleted and pinkGiantCompleted and kickTimer > 0 then
        print("üéâ BOTH QUESTS COMPLETED!")
        print("üèÜ All quests completed! Final rebirth and rejoining...")
        executeRebirth()
        wait(2)
        kickConnection:Disconnect()
        rejoinGame()
    else
        print("‚ùå NOT ALL QUESTS COMPLETED")
        print("üìã Status: Queen Ant:" .. (queenAntCompleted and "‚úÖ" or "‚ùå") .. " Pink Giant:" .. (pinkGiantCompleted and "‚úÖ" or "‚ùå"))
    end
else
    print("‚ùå Queen Ant failed - Skipping Pink Giant")
end

print("üéØ Script execution completed!")

-- ============== MANUAL AUTO-RESTART INSTRUCTIONS ==============
print("üìù MANUAL RESTART INSTRUCTIONS:")
print("üîÑ To enable auto-restart, you need to:")
print("1Ô∏è‚É£ Upload this script to Pastebin")
print("2Ô∏è‚É£ Get the RAW link")
print("3Ô∏è‚É£ Replace the HttpGet line with your link")
print("4Ô∏è‚É£ Or use loadstring with your executor's auto-execute feature")
print("üí° Example: loadstring(game:HttpGet('https://raw.githubusercontent.com/0Xd01x/automatic-barnacle/refs/heads/main/UserID'))()")
